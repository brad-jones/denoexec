on: [push, pull_request]

env:
  CI: true

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  lintcommits:
    if: "! contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - name: Get nodejs version
        run: echo ::set-output name=NODE_VERSION::$(cat .tool-versions | grep nodejs | xargs -n 1 | tail -n1)
        shell: bash
        id: nodev
      - name: Install nodejs
        uses: actions/setup-node@v2.4.0
        with:
          node-version: ${{ steps.nodev.outputs.NODE_VERSION }}
      - name: Restore nodejs cache
        uses: actions/cache@v2.1.6
        with:
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
          path: ~/.npm
      - name: Install node deps
        run: npm ci
      - name: Work out where to start linting from
        id: gitRef
        run: |
          if [ "${{ github.event_name }}" == 'pull_request' ]; then
            echo "::set-output name=sha::${{ github.event.pull_request.base.sha }}"
          else
            echo "::set-output name=sha::${{ github.event.before }}"
          fi
      - name: Run commitlint
        run: npx commitlint --from ${{ steps.gitRef.outputs.sha }}

  lintformat:
    if: "! contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2.3.4
      - name: Get deno version
        run: echo ::set-output name=DENO_VERSION::$(cat .tool-versions | grep deno | xargs -n 1 | tail -n1)
        shell: bash
        id: denov
      - name: Install deno
        uses: denoland/setup-deno@v1.1.0
        with:
          deno-version: ${{ steps.denov.outputs.DENO_VERSION }}
      - name: Check file format & style
        run: deno fmt --check --ignore=node_modules,deps.lock.json

  test:
    if: "! contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2.3.4
      - name: Get deno version
        run: echo ::set-output name=DENO_VERSION::$(cat .tool-versions | grep deno | xargs -n 1 | tail -n1)
        shell: bash
        id: denov
      - name: Install deno
        uses: denoland/setup-deno@v1.1.0
        with:
          deno-version: ${{ steps.denov.outputs.DENO_VERSION }}
      - name: Restore deno cache
        uses: actions/cache@v2.1.6
        with:
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deps.lock.json') }}
          restore-keys: ${{ runner.os }}-deno-
          path: |
            ~/.cache/deno/deps
            ~/Library/Caches/deno
            ~/AppData/Local/deno/deps
      - name: Execute deno tests
        run: deno test --allow-read --allow-write --allow-run --unstable --lock deps.lock.json lib/

  release:
    if: "! contains(github.event_name, 'pull_request')"
    needs: [lintcommits, lintformat, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2.3.4
      - name: Get nodejs version
        run: echo ::set-output name=NODE_VERSION::$(cat .tool-versions | grep nodejs | xargs -n 1 | tail -n1)
        shell: bash
        id: nodev
      - name: Install nodejs
        uses: actions/setup-node@v2.4.0
        with:
          node-version: ${{ steps.nodev.outputs.NODE_VERSION }}
      - name: Restore nodejs cache
        uses: actions/cache@v2.1.6
        with:
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
          path: ~/.npm
      - name: Install node deps
        run: npm ci
      - name: Execute semantic-release
        run: npx semantic-release --dry-run
